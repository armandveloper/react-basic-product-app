{"version":3,"sources":["components/Form/Form.js","components/ProductList/ProductList.js","components/Content/Content.js","App.js","serviceWorker.js","index.js","components/Form/Form.module.css","components/Content/Content.module.css","components/ProductList/ProductList.module.css"],"names":["Form","setProduct","products","useState","productName","setProductName","action","className","styles","form","onSubmit","e","preventDefault","id","shortid","generate","name","htmlFor","type","input","value","onChange","target","trim","button","ProductList","length","noItems","productList","map","product","key","Content","localStorage","getItem","JSON","parse","useEffect","setItem","stringify","content","title","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"6RAiCeA,MA7Bf,YAAyC,IAAzBC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,SAAY,EACDC,mBAAS,IADR,mBAChCC,EADgC,KACnBC,EADmB,KAavC,OACC,0BAAMC,OAAO,IAAIC,UAAWC,IAAOC,KAAMC,SAZrB,SAACC,GACrBA,EAAEC,iBACkB,KAAhBR,IAGJH,EAAW,GAAD,mBACNC,GADM,CAET,CAAEW,GAAIC,IAAQC,WAAYC,KAAMZ,MAEjCC,EAAe,OAId,2BAAOY,QAAQ,gBAAf,mBACA,2BACCC,KAAK,OACLF,KAAK,eACLH,GAAG,eACHN,UAAWC,IAAOW,MAClBC,MAAOhB,EACPiB,SAAU,SAACV,GAAD,OAAON,EAAeM,EAAEW,OAAOF,MAAMG,WAEhD,2BAAOL,KAAK,SAASE,MAAM,UAAUb,UAAWC,IAAOgB,W,gBCX3CC,MAdf,YAAoC,IAAbvB,EAAY,EAAZA,SACtB,OAA2B,IAApBA,EAASwB,OACf,yBAAKnB,UAAWC,IAAOmB,SACtB,+EAGD,wBAAIpB,UAAWC,IAAOoB,aACpB1B,EAAS2B,KAAI,SAACC,GAAD,OACb,wBAAIC,IAAKD,EAAQjB,IAAKiB,EAAQd,WCYnBgB,MAlBf,WAAoB,IAAD,EACa7B,mBAC9B8B,aAAaC,QAAQ,YAClBC,KAAKC,MAAMH,aAAaC,QAAQ,aAChC,IAJc,mBACXhC,EADW,KACDD,EADC,KASlB,OAHAoC,qBAAU,WACTJ,aAAaK,QAAQ,WAAYH,KAAKI,UAAUrC,MAC9C,CAACA,IAEH,yBAAKK,UAAWC,IAAOgC,SACtB,wBAAIjC,UAAWC,IAAOiC,OAAtB,8BACA,kBAAC,EAAD,CAAMxC,WAAYA,EAAYC,SAAUA,IACxC,kBAAC,EAAD,CAAaA,SAAUA,MCXXwC,MAJf,WACC,OAAO,kBAAC,EAAD,OCQYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,KAAO,mBAAmB,MAAQ,oBAAoB,OAAS,uB,kBCAjFD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,yB,kBCA7DD,EAAOC,QAAU,CAAC,YAAc,iCAAiC,QAAU,gC","file":"static/js/main.ffc4492d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport styles from './Form.module.css';\r\nimport shortid from 'shortid';\r\n\r\nfunction Form({ setProduct, products }) {\r\n\tconst [productName, setProductName] = useState('');\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (productName === '') {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetProduct([\r\n\t\t\t...products,\r\n\t\t\t{ id: shortid.generate(), name: productName },\r\n\t\t]);\r\n\t\tsetProductName('');\r\n\t};\r\n\treturn (\r\n\t\t<form action=\"#\" className={styles.form} onSubmit={handleSubmit}>\r\n\t\t\t<label htmlFor=\"product-name\">Nombre producto</label>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tname=\"product-name\"\r\n\t\t\t\tid=\"product-name\"\r\n\t\t\t\tclassName={styles.input}\r\n\t\t\t\tvalue={productName}\r\n\t\t\t\tonChange={(e) => setProductName(e.target.value.trim())}\r\n\t\t\t/>\r\n\t\t\t<input type=\"submit\" value=\"Agregar\" className={styles.button} />\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\nimport styles from './ProductList.module.css';\r\n\r\nfunction ProductList({ products }) {\r\n\treturn products.length === 0 ? (\r\n\t\t<div className={styles.noItems}>\r\n\t\t\t<p>No hay productos aún. Comience agregando uno</p>\r\n\t\t</div>\r\n\t) : (\r\n\t\t<ul className={styles.productList}>\r\n\t\t\t{products.map((product) => (\r\n\t\t\t\t<li key={product.id}>{product.name}</li>\r\n\t\t\t))}\r\n\t\t</ul>\r\n\t);\r\n}\r\n\r\nexport default ProductList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport styles from './Content.module.css';\r\nimport Form from '../Form/Form';\r\nimport ProductList from '../ProductList/ProductList';\r\n\r\nfunction Content() {\r\n\tconst [products, setProduct] = useState(\r\n\t\tlocalStorage.getItem('products')\r\n\t\t\t? JSON.parse(localStorage.getItem('products'))\r\n\t\t\t: []\r\n\t);\r\n\tuseEffect(() => {\r\n\t\tlocalStorage.setItem('products', JSON.stringify(products));\r\n\t}, [products]);\r\n\treturn (\r\n\t\t<div className={styles.content}>\r\n\t\t\t<h1 className={styles.title}>Aplicación de Productos</h1>\r\n\t\t\t<Form setProduct={setProduct} products={products} />\r\n\t\t\t<ProductList products={products} />\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Content;\r\n","import React from 'react';\r\nimport Content from './components/Content/Content';\r\n\r\nfunction App() {\r\n\treturn <Content />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__IOxL5\",\"input\":\"Form_input__1B_dP\",\"button\":\"Form_button__367GK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Content_content__3SvOu\",\"title\":\"Content_title__3gAht\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"productList\":\"ProductList_productList__2Kwxw\",\"noItems\":\"ProductList_noItems__sXMe1\"};"],"sourceRoot":""}